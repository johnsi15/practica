{
  "name": "souch",
  "version": "0.0.5",
  "description": "Simple CouchDB Client for NodeJS",
  "main": "index.js",
  "author": {
    "name": "Samuel Burbano Ramos - @iosamuel"
  },
  "license": "BSD",
  "readme": "# Souch\r\n\r\nSimple client interface for handle CouchDB Database from NodeJS with some utilities that you can use.\r\n\r\nYou can see an example using Souch in [http://github.com/iosamuel/nodecrud](http://github.com/iosamuel/nodecrud)\r\n\r\n## How to use\r\n\r\n\tvar CouchDB = require('souch');\r\n\r\n\tvar db = new CouchDB('mydb', {\r\n\t\thost: 'localhost', // optional. Default to 'localhost'\r\n\t\tport: 5984, // optional. Default to 5984\r\n\t\tuser: 'user', // optional\r\n\t\tpasswd: 'passwd' // optional\r\n\t});\r\n\r\n\t* the second argument to CouchDB constructor is totally optional, in the case that is not passed the default values are used to comunicate with CouchDB\r\n\t* host -> can be passed if you have CouchDB in another host than localhost\r\n\t* port -> can be passed if you have CouchDB in another port than the default (5984)\r\n\t* user and passwd can be passed if you have security in your database with some user.\r\n\t\t. If these are omited, any security is not passed to CouchDB, so the database have to be free\r\n\r\n## Souch API\r\n\r\nThe Souch API count with four method principaly, each one correspond with the four principal HTTP VERBS: GET, POST, PUT and DELETE.\r\nThe Souch API enfatizes the use of a field 'type' in all our docs per database, so when you want to use docs with Souch you have to pass the 'type' field value in the construct or alternatively you can pass an object with the field name and value to identify a group of docs.\r\n\r\nExample of CouchDB docs in your DB:\r\n\r\n\t{\r\n\t\t'_id': 'orangeId123'\r\n\t\t'name': 'orange',\r\n\t\t'price': 1,\r\n\t\t'type': 'product'\r\n\t}\r\n\r\n\t{\r\n\t\t'_id': 'asiouq12kljasd01'\r\n\t\t'name': 'other',\r\n\t\t'price': 2,\r\n\t\t'type': 'product'\r\n\t}\r\n\r\n\t{\r\n\t\t'_id': 'someID'\r\n\t\t'name': 'Jhon',\r\n\t\t'age': 20,\r\n\t\t'password': 'somepassinsha1'\r\n\t\t'_type': 'user'\r\n\t}\r\n\r\n\t{\r\n\t\t'_id': 'someOtherID'\r\n\t\t'name': 'Smith',\r\n\t\t'age': 23,\r\n\t\t'password': 'someotherpassinsha1'\r\n\t\t'_type': 'user'\r\n\t}\r\n\r\n\r\nExample of connection with credentials to a restricted database and the preparation to use docs, in this case with the field name of 'type' (default) and the value of 'product', as you can see up here and prepare to use a doc in these case with a diferent field name and value than the default (type).\r\n\r\n\tvar CouchDB = require('souch');\r\n\r\n\tvar db = new CouchDB('mydb', {\r\n\t\tuser: 'admin',\r\n\t\tpasswd: 'admin123'\r\n\t});\r\n\r\n\tvar products = db.newDoc('product'); // here we use the default type field in our docs, so just pass the value for this field\r\n\tvar users = db.newDoc({ _type:'user' }); // here we use a diferent field name than the default, so we pass the name of the field and his value\r\n\r\n### GET\r\n\r\n\tproducts.get('orangeId123', function(result){\r\n\t\tconsole.log(result); // which return the simple doc json that you can see up with those fields, like: _id, name, price, type and you can play with any of these.\r\n\t});\r\n\r\n### POST\r\n\r\n\tvar newPost = {\r\n\t\t'_id': 'mynewdoc',\r\n\t\t'name': 'lemon',\r\n\t\t'price': 3\r\n\t}; // of course you don't have to worry about the 'type' field, this part Souch make automatically and you can omit _id field and then CouchDB create an ID for you\r\n\tproducts.post(newPost, function(result){\r\n\t\tconsole.log(result); // in these case 'result' is the JSON object that CouchDB send when an action is processed succefully with fields like, 'ok' or 'error' and these messages\r\n\t});\r\n\r\n### PUT\r\n\r\n\tvar post = {\r\n\t\t'name': 'new orange',\r\n\t\t'price': 2\r\n\t}; // pass the data to modify in the doc, like CouchDB say, have to send all the new data and the old data, of course Souch handle for you the _rev id, so you don't have to worry about that\r\n\tproducts.put('orangeId123', post, function(result){\r\n\t\tconsole.log(result); // in these case 'result' is the same JSON object that CouchDB send to POST\r\n\t}); // here you pass for the first argument, the ID for the doc to modify, the data to modify and of course, the callback to take the results from couchdb\r\n\r\n\t// or you can insert with PUT\r\n\tproducts.put('myNewId', post, true, function(result){ // the third argument tell that this info will be inserted in place of modified.\r\n\t\tconsole.log(result);\r\n\t});\r\n\r\n### DELETE\r\n\r\n\tproducts.delete('orangeId123', function(result){\r\n\t\tconsole.log(result); // in these case 'result' is, again, the same JSON object that CouchDB send to POST\r\n\t});\r\n\r\n### Design Docs\r\nOf course, like CouchDB client have support to call design docs from the DB, here some examples of a map view.\r\nSouch support distints types of design docs, like: show, map/reduce, list, etc.\r\n\r\nAn example call to a map view in an url like this: /database/_design/products/_view/all?descending=true\r\n\r\n\tvar options = {\r\n\t\tdescending: true,\r\n\t};\r\n\tdb.design('products', { type:'view', name:'all', params:options }, function(results){ // type is optional. Default to 'view'\r\n\t\tfor (var i=0; i<results.rows.length; i++){\r\n\t\t\tconsole.log(results.rows[i].name);\r\n\t\t}\r\n\t});\r\n\r\nFor use things like startkey and endkey and some other parameter use params in the object passed, here an example:\r\n\r\n\tvar options = {\r\n\t\tdescending:true,\r\n\t\tstartkey:'[\"?\\u9999\"]'.format('o'),\r\n\t\tendkey:'[\"?\"]'.format('o')\r\n\t};\r\n\tdb.design('products', { name:'all', params:options }, function(results){ // here we use the default value of 'type' that is 'view'\r\n\t\tfor (var i=0; i<results.rows.length; i++){\r\n\t\t\tconsole.log(results.rows[i].name);\r\n\t\t}\r\n\t});\r\n\r\nAs you can see here we use '.format' that is a function make in Souch for help you to have more cleanly your code and maintain very easily.\r\n\r\n### Built-in methods\r\n\r\nSouch have two methods publics that you can use to simplify work with CouchDB: format() for strings, hash() a shortcut to hash with crypto module for strings and unique() for arrays.\r\nHere are some use that you can do with these methods:\r\n\r\n\tvar options = {\r\n\t\tdescending: true,\r\n\t\tstartkey:'[\"?\\u9999\"]'.format('o'), // we use format() to do clean and escalable code\r\n\t\tendkey:'[\"?\"]'.format('o')\r\n\t};\r\n\tdb.design('products', { name:'all', params:options }, function(results){\r\n\t\tresults.rows.unique(); // in the case that the filter for some case like an search algoritm in the CouchDB side return duplicate results we can use unique() for reduce the array to unique's ID\r\n\t\tfor (var i=0; i<results.rows.length; i++){\r\n\t\t\tconsole.log(results.rows[i].name);\r\n\t\t}\r\n\t});\r\n\r\n\tproducts.get('someID', function(result){\r\n\t\tif ('somepasswordinsha1'.hash('sha1') == result.password){ // here we use hash() to encrypt the password, see the api docs for crypto module in the page of nodejs to see the types of hash that support.\r\n\t\t\tconsole.log('Welcome!');\r\n\t\t}\r\n\t});\r\n\r\n\r\n## Author\r\n---------\r\nSamuel Burbano Ramos - @iosamuel",
  "readmeFilename": "README.md",
  "_id": "souch@0.0.5",
  "_from": "souch@"
}
